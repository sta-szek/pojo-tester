plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty('sonatype.username')
            password = findProperty('sonatype.password')
        }
    }
}

def baseJvmArgs = [
    "--add-opens=java.base/java.time=ALL-UNNAMED",
    "--add-opens=java.base/java.util.function=ALL-UNNAMED",
]

group 'com.obsidiandynamics.pojotester'
version '0.10.0-SNAPSHOT'

ext {
    JUNIT_JUPITER_VERSION = "5.4.0"
    JUNIT_PLATFORM_VERSION = "1.4.0"
    MOCKITO_VERSION = "2.25.0"
    POWER_MOCK_UTILS_VERSION = "1.6.6"
    ASSERTJ_CORE_VERSION = "3.11.1"
    JACOCO_VERSION = "0.8.3"
}

apply plugin: 'java-library'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    api("org.slf4j:slf4j-api:1.7.26")
    api("org.apache.commons:commons-lang3:3.8.1")
    api("org.apache.commons:commons-collections4:4.3")
    api("com.googlecode.combinatoricslib:combinatoricslib:2.1")
    api("org.javassist:javassist:3.24.1-GA")

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${JUNIT_JUPITER_VERSION}") { changing = true }
    testImplementation("org.junit.platform:junit-platform-runner:${JUNIT_PLATFORM_VERSION}") { changing = true }
    testImplementation("org.assertj:assertj-core:${ASSERTJ_CORE_VERSION}")
    testImplementation("org.mockito:mockito-core:${MOCKITO_VERSION}")
    testImplementation("org.powermock.tests:powermock-tests-utils:${POWER_MOCK_UTILS_VERSION}")
    testImplementation("org.apiguardian:apiguardian-api:1.0.0")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${JUNIT_JUPITER_VERSION}") { changing = true }
    testImplementation("org.slf4j:slf4j-nop:1.7.26")
}

test {
    useJUnitPlatform()
    jvmArgs += baseJvmArgs
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

//TODO remove when Javadoc errors have been resolved
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

java {
    withJavadocJar()
    withSourcesJar()
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

jar {
    finalizedBy jacocoTestReport
}

signing {
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'core'
            from components.java
            pom {
                name = 'pojo-tester'
                description = 'POJO testing library'
                url = 'https://github.com/obsidiandynamics/pojo-tester'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'ekoutanov'
                        name = 'Emil Koutanov'
                        email = 'ekoutanov@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/obsidiandynamics/pojo-tester.git'
                    developerConnection = 'scm:git:ssh://github.com/obsidiandynamics/pojo-tester.git'
                    url = 'https://github.com/obsidiandynamics/pojo-tester'
                }
            }
        }
    }
}