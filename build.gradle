import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.regex.Matcher

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10")
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.0.0-SNAPSHOT") { changing = true }
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7"
    id 'net.researchgate.release' version '2.4.0'
}

ext {
    JUNIT_JUPITER_VERSION = "5.0.0-SNAPSHOT"
    JUNIT_PLATFORM_VERSION = "1.0.0-SNAPSHOT"
    MOCKITO_VERSION = "2.3.11"
    POWER_MOCK_UTILS_VERSION = "1.6.6"
    ASSERTJ_CORE_VERSION = "3.6.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

junitPlatform {
    enableStandardTestTask true
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile("org.slf4j:slf4j-simple:1.7.21")
    compile("org.apache.commons:commons-lang3:3.4")
    compile("org.apache.commons:commons-collections4:4.1")
    compile("com.google.collections:google-collections:1.0")
    compile("com.googlecode.combinatoricslib:combinatoricslib:2.1")
    compile("org.projectlombok:lombok:1.16.12")
    compile("org.javassist:javassist:3.20.0-GA")


    testCompile("org.junit.jupiter:junit-jupiter-api:${JUNIT_JUPITER_VERSION}") { changing = true }
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${JUNIT_JUPITER_VERSION}") { changing = true }
    testCompile("org.junit.platform:junit-platform-runner:${JUNIT_PLATFORM_VERSION}") { changing = true }
    testCompile("org.assertj:assertj-core:${ASSERTJ_CORE_VERSION}")
    testCompile("org.mockito:mockito-core:${MOCKITO_VERSION}")
    testCompile("org.powermock.tests:powermock-tests-utils:${POWER_MOCK_UTILS_VERSION}")
}

jacoco {
    toolVersion = "0.7.8"
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoHtml"
    }
}

pitest {
    pitestVersion = '1.1.10'
    exportLineCoverage = true
    timestampedReports = false
    targetClasses = ['pl.pojo.tester.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

publishing.publications.all {
    pom.withXml {
        asNode().dependencies.'*'.findAll() {
            it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                dep.name == it.artifactId.text()
            }
        }.each { it.scope*.value = 'compile' }
    }
}

bintray {
    user = 'sta-szek'
    key = System.getenv('BINTRAY_API_KEY')
    pkg {
        repo = 'maven'
        name = 'pojo-tester'
        desc = 'Java pojo-methods testing library.'
        websiteUrl = 'http://www.pojo.pl'
        issueTrackerUrl = 'https://github.com/sta-szek/pojo-tester/issues'
        vcsUrl = 'https://github.com/sta-szek/pojo-tester.git'
        licenses = ['GPL-3.0']
        publications = ['mavenJava']
        version {
            name = rootProject.version
            desc = 'Java pojo-methods testing library.'
            released = new Date();
            vcsTag = rootProject.version
        }
    }
}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
    failOnUpdateNeeded = true
    revertOnFail = true
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = []

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
    }
}

jar {
    manifest.attributes(createManifestAttributes())
}

def createManifestAttributes() {
    Map attributes = new HashMap<>();
    attributes.put('Manifest-Version', 1.0,)
    attributes.put('Implementation-Title', rootProject.name,)
    attributes.put('Implementation-Version', version,)
    attributes.put('Implementation-Vendor', 'pojo.pl',)
    attributes.put('Created-By', System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',)
    attributes.put('Built-With', "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",)
    attributes.put('Build-Time', ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_ZONED_DATE_TIME),)
    attributes.put('Built-By', gitUser())
    attributes
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

static def gitUser() {
    def username = ""
    def useremail = ""

    def userNameProc = "git config user.name".execute()
    userNameProc.in.eachLine { line -> username = line }
    userNameProc.waitFor()

    def userEmailProc = "git config user.email".execute()
    userEmailProc.in.eachLine { line -> useremail = line }
    userEmailProc.waitFor()
    username + " " + useremail
}

check.dependsOn jacocoTestReport
build.dependsOn publishToMavenLocal

